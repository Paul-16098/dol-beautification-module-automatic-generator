name: py to exe

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

defaults:
  run:
    shell: cmd
    working-directory: .\

jobs:
  build:
    runs-on: [windows-latest]

    steps:
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: init
      run: |
        chcp 65001
        cd ..
        echo %cd%
        dir>output.txt
        type output.txt
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    - name: py to exe
      run: |
        pyinstaller --noconfirm --onedir --console --icon "Vrelicon.ico" --onefile "dol美化模组自动生成器.exe"
    - name: del temp
      run: |
        del build /f /s /q
        rmdir build /s /q
        del dol美化模组自动生成器.spec /f /s /q
        copy /v /y dist\dol美化模组自动生成器.exe .

  Release:
    needs: build  # 添加 needs 關鍵字，指定依賴於 build 作業
    runs-on: [windows-latest]
    
    steps:
        - name: Create Release
          uses: actions/checkout@v3
        - name: Delete Release
          uses: actions/github-script@v4
          with:
            github-token: ${{ secrets.TOKEN }}
            script: |
                    const deleteRelease = async () => {
                      try {
                        const octokit = github.getOctokit(process.env.TOKEN);
                        const releases = await octokit.repos.listReleases({
                          owner: context.repo.owner,
                          repo: context.repo.repo
                        });
                        
                        const release = releases.data.find(r => r.tag_name === 'last-Release');
                        if (release) {
                          await octokit.repos.deleteRelease({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            release_id: release.id
                          });
                          console.log('Release deleted successfully.');
                        } else {
                          console.log('Release not found.');
                        }
                      } catch (error) {
                        console.error('Error deleting release:', error);
                      }
                    };
                    
                    deleteRelease();
        
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.TOKEN }}
          with:
            tag_name: last-Release  # 指定發行版的標籤名稱
            release_name: last-Release  # 指定發行版的名稱
            body: |
              last-Release
            draft: false
            prerelease: false
        - name: Upload Release Asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: .\dol美化模组自动生成器.exe
            asset_name: dol美化模组自动生成器.exe
            asset_content_type: application/octet-stream
